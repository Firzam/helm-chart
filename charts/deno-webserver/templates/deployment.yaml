apiVersion: apps/v1
kind: Deployment
metadata:
    annotations:
        deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2022-02-12T13:07:11Z"
    generation: 1
    labels:
        app: deno-webserver
    name: "{{ .Release.Name }}-deno-webserver"
    namespace: default
spec:
    progressDeadlineSeconds: 600
    replicas: {{ .Values.webserver.replicaCount }}
    revisionHistoryLimit: 10
    selector:
        matchLabels:
            app: "{{ .Release.Name }}-deno-webserver"
    strategy:
        rollingUpdate:
            maxSurge: 25%
            maxUnavailable: 25%
        type: RollingUpdate
    template:
        metadata:
            creationTimestamp:
            labels:
                app: "{{ .Release.Name }}-deno-webserver"
        spec:
            containers:
                -   image: "{{ .Values.webserver.image.repository }}:{{ .Values.webserver.image.tag }}"
                    imagePullPolicy: "{{ .Values.webserver.image.pullPolicy }}"
                    name: "{{ .Release.Name }}-deno-webserver"
                    resources: { }
                    env:
                      - name: MARIADB_ROOT_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: "{{ .Release.Name }}-maria-db"
                            key: rootPassword
                      - name: MARIADB_DATABASE
                        valueFrom:
                          secretKeyRef:
                            name: "{{ .Release.Name }}-maria-db"
                            key: database
                      - name: MARIADB_USER
                        valueFrom:
                          secretKeyRef:
                            name: "{{ .Release.Name }}-maria-db"
                            key: user
                      - name: MARIADB_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: "{{ .Release.Name }}-maria-db"
                            key: password
                    terminationMessagePath: /dev/termination-log
                    terminationMessagePolicy: File
                    volumeMounts:
                      - mountPath: "{{ .Release.Name }}-{{ .Values.webserver.volumeMounts.mountPath }}"
                        name: "{{ .Release.Name }}-{{ .Values.webserver.volumeMounts.name }}"
            dnsPolicy: ClusterFirst
            restartPolicy: Always
            schedulerName: default-scheduler
            securityContext: { }
            terminationGracePeriodSeconds: 30
            volumes:
                - name: "{{ .Release.Name }}-{{ .Values.webserver.volumes.name }}"
                  persistentVolumeClaim:
                      claimName: "{{ .Release.Name }}-{{ .Values.webserver.volumes.nameClaim }}"

---
apiVersion: v1
kind: PersistentVolume
metadata:
    name: "{{ .Release.Name }}-deno-server"
spec:
    accessModes:
        - ReadWriteOnce
    persistentVolumeReclaimPolicy: Retain
    storageClassName: standard
    capacity:
        storage: 3Gi
    hostPath:
        path: "/data/{{ .Release.Name }}-deno-server/"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: "{{ .Release.Name }}-logs"
    namespace: default
spec:
    accessModes:
        - ReadWriteOnce
    resources:
        requests:
            storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-{{ .Values.servicewebserver.name }}"
  namespace: default
spec:
  ports:
    - port: {{ .Values.servicewebserver.port }}
      protocol: TCP
      targetPort: {{ .Values.servicewebserver.targetPort }}
  selector:
    app: {{ .Release.Name }}-{{ .Values.servicewebserver.name }}
  type: {{ .Values.servicewebserver.type }}